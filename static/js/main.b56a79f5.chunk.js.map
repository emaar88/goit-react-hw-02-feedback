{"version":3,"sources":["components/Statistics/Statistics.module.css","components/FeedbackOptions/FeedbackOptions.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","components/Section/Section.js","components/Statistics/Statistics.js","components/FeedbackOptions/FeedbackOptions.js","components/Notification/Notification.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Section","title","children","className","classes","section","Statistics","good","neutral","bad","total","positivePercentage","list","listItem","listItemTrue","FeedbackOptions","options","onLeaveFeedback","buttons","Object","keys","console","log","wrap","map","nameButton","name","type","button","onClick","Notification","message","alert","App","state","countTotalFeedback","countPositiveFeedbackPercentage","toFixed","updateProp","e","target","setState","prevState","this","countClicks","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"0GACAA,EAAOC,QAAU,CAAC,KAAO,yBAAyB,aAAe,mC,gBCAjED,EAAOC,QAAU,CAAC,OAAS,gCAAgC,KAAO,gC,qBCAlED,EAAOC,QAAU,CAAC,QAAU,2B,gBCA5BD,EAAOC,QAAU,CAAC,MAAQ,8B,8LCiBXC,EAdC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,6BAASC,UAAWC,IAAQC,SAC1B,4BAAKJ,GACJC,I,gBCgBQI,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,QAASC,EAAqC,EAArCA,IAAKC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAC/C,OACE,wBAAIR,UAAWC,IAAQQ,MACrB,wBAAIT,UAAWC,IAAQS,UAAvB,SAAwCN,GACxC,wBAAIJ,UAAWC,IAAQS,UAAvB,YAA2CL,GAC3C,wBAAIL,UAAWC,IAAQS,UAAvB,QAAuCJ,GACvC,wBAAIN,UAAWC,IAAQS,UAAvB,UAAyCH,GACxCC,EAAqB,GACpB,wBAAIR,UAAWC,IAAQS,UAAYT,IAAQU,cAA3C,wBACwBH,GAGxB,wBAAIR,UAAWC,IAAQS,UAAvB,wBACwBF,K,gBCiBjBI,EA9BS,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,QAASC,EAAsB,EAAtBA,gBAC5BC,EAAUC,OAAOC,KAAKJ,GAE5B,OADAK,QAAQC,IAAIJ,GAEV,oCACE,yBAAKf,UAAWC,IAAQmB,MACrBL,EAAQM,KAAI,SAACC,GAAD,OACX,4BACEC,KAAMD,EACNE,KAAK,SACLxB,UAAWC,IAAQwB,OACnBC,QAASZ,GAERQ,S,gBCLEK,EARM,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACtB,OACE,6BACE,uBAAG5B,UAAWC,IAAQ4B,OAAQD,KCmDrBE,E,4MAnDbC,MAAQ,CACN3B,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAEP0B,mBAAqB,WAEnB,OADiB,EAAKD,MAAM3B,KAAO,EAAK2B,MAAM1B,QAAU,EAAK0B,MAAMzB,K,EAGrE2B,gCAAkC,WAKhC,OAHG,EAAKF,MAAM3B,KAAO,EAAK4B,qBACxB,KACAE,QAAQ,I,EAGZC,WAAa,SAACC,GAAO,IACXb,EAASa,EAAEC,OAAXd,KACR,EAAKe,UAAS,SAACC,GAAD,sBACXhB,EAAOgB,EAAUhB,GAAQ,O,uDAGpB,IAAD,EACwBiB,KAAKT,MAC9BU,GAFC,EACCrC,KADD,EACOC,QADP,EACgBC,IACHkC,KAAKR,sBACzB,OACE,oCACE,kBAAC,EAAD,CAASlC,MAAM,yBACb,kBAAC,EAAD,CACEe,QAAS2B,KAAKT,MACdjB,gBAAiB0B,KAAKL,cAG1B,kBAAC,EAAD,CAASrC,MAAM,cACZ2C,EAAc,EACb,kBAAC,EAAD,CACErC,KAAMoC,KAAKT,MAAM3B,KACjBC,QAASmC,KAAKT,MAAM1B,QACpBC,IAAKkC,KAAKT,MAAMzB,IAChBC,MAAOkC,EACPjC,mBAAoBgC,KAAKP,oCAG3B,kBAAC,EAAD,CAAcL,QAAQ,4B,GA5ChBc,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMhC,c","file":"static/js/main.b56a79f5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"Statistics_list__2QQoW\",\"listItemTrue\":\"Statistics_listItemTrue__1BWRf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"FeedbackOptions_button__1W7vE\",\"wrap\":\"FeedbackOptions_wrap__yKTwA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__3S2ip\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"alert\":\"Notification_alert__2n9MT\"};","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./Section.module.css\";\r\n\r\nconst Section = ({ title, children }) => {\r\n  return (\r\n    <section className={classes.section}>\r\n      <h2>{title}</h2>\r\n      {children}\r\n    </section>\r\n  );\r\n};\r\n\r\nSection.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  children: PropTypes.node,\r\n};\r\n\r\nexport default Section;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./Statistics.module.css\";\r\n\r\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) => {\r\n  return (\r\n    <ul className={classes.list}>\r\n      <li className={classes.listItem}>Good: {good}</li>\r\n      <li className={classes.listItem}>Neutral: {neutral}</li>\r\n      <li className={classes.listItem}>Bad: {bad}</li>\r\n      <li className={classes.listItem}>Total: {total}</li>\r\n      {positivePercentage > 50 ? (\r\n        <li className={classes.listItem || classes.listItemTrue}>\r\n          Positive Percentage: {positivePercentage}\r\n        </li>\r\n      ) : (\r\n        <li className={classes.listItem}>\r\n          Positive Percentage: {positivePercentage}\r\n        </li>\r\n      )}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default Statistics;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./FeedbackOptions.module.css\";\r\n\r\nconst FeedbackOptions = ({ options, onLeaveFeedback }) => {\r\n  const buttons = Object.keys(options);\r\n  console.log(buttons);\r\n  return (\r\n    <>\r\n      <div className={classes.wrap}>\r\n        {buttons.map((nameButton) => (\r\n          <button\r\n            name={nameButton}\r\n            type=\"button\"\r\n            className={classes.button}\r\n            onClick={onLeaveFeedback}\r\n          >\r\n            {nameButton}\r\n          </button>\r\n        ))}\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n  options: PropTypes.shape({\r\n    good: PropTypes.number.isRequired,\r\n    neutral: PropTypes.number.isRequired,\r\n    bad: PropTypes.number.isRequired,\r\n  }).isRequired,\r\n  onLeaveFeedback: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default FeedbackOptions;\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./Notification.module.css\";\r\n\r\nconst Notification = ({ message }) => {\r\n  return (\r\n    <div>\r\n      <p className={classes.alert}>{message}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import React, { Component } from \"react\";\nimport Section from \"./components/Section/Section\";\nimport Statistics from \"./components/Statistics/Statistics\";\nimport FeedbackOptions from \"./components/FeedbackOptions/FeedbackOptions\";\nimport Notification from \"./components/Notification/Notification\";\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n  countTotalFeedback = () => {\n    let totalCount = this.state.good + this.state.neutral + this.state.bad;\n    return totalCount;\n  };\n  countPositiveFeedbackPercentage = () => {\n    let totalPositive = (\n      (this.state.good / this.countTotalFeedback()) *\n      100\n    ).toFixed(1);\n    return totalPositive;\n  };\n  updateProp = (e) => {\n    const { name } = e.target;\n    this.setState((prevState) => ({\n      [name]: prevState[name] + 1,\n    }));\n  };\n  render() {\n    const { good, neutral, bad } = this.state;\n    const countClicks = this.countTotalFeedback();\n    return (\n      <>\n        <Section title=\"Please leeve Feedback\">\n          <FeedbackOptions\n            options={this.state}\n            onLeaveFeedback={this.updateProp}\n          ></FeedbackOptions>\n        </Section>\n        <Section title=\"Statistics\">\n          {countClicks > 0 ? (\n            <Statistics\n              good={this.state.good}\n              neutral={this.state.neutral}\n              bad={this.state.bad}\n              total={countClicks}\n              positivePercentage={this.countPositiveFeedbackPercentage()}\n            ></Statistics>\n          ) : (\n            <Notification message=\"No feedback given\"></Notification>\n          )}\n        </Section>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}